@model PPPK.ViewModels.SqlConnectionViewModel
@{
    ViewBag.Title = "Index";
}

<h2>Sql Connection</h2>

<!-- Modal -->
<div id="modal-form" class="modal fade" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Modal Header</h4>
            </div>
            <div class="modal-body container" style="overflow:hidden;">

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>

<div class="container">
    <ul class="nav nav-tabs">
        <li class="active"><a data-toggle="tab" href="#drivers">Drivers</a></li>
        <li><a data-toggle="tab" href="#vehicles">Vehicles</a></li>
        <li><a data-toggle="tab" href="#travel-orders">Travel Order</a></li>
    </ul>

    <div class="tab-content">
        <div id="drivers" class="tab-pane fade in active">
            <h3>Drivers</h3>
            <div>
                <table class="table table-condensed table-hover" id="driver-table" style="width:100%">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>First name</th>
                            <th>Last name</th>
                            <th>Driver's liscence</th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                    <tfoot>
                        <tr>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                        </tr>
                    </tfoot>
                </table>
            </div>

        </div>
        <div id="vehicles" class="tab-pane fade">
            <h3>Vehicles</h3>
            <div>
                <table class="table table-condensed table-hover" id="vehicle-table" style="width:100%">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Model</th>
                            <th>Type</th>
                            <th>Year manufactured</th>
                            <th>Registration</th>
                            <th>Initial km</th>
                            <th>Available</th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                    <tfoot>
                        <tr>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
        <div id="travel-orders" class="tab-pane fade">
            <h3>Travel orders</h3>
            <div>
                <table class="table table-condensed table-hover" id="travel-order-table" style="width:100%">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Driver</th>
                            <th>Vehicle</th>
                            <th>Start city</th>
                            <th>End city</th>
                            <th>Expected number of days</th>
                            <th>Type</th>
                            <th>Reason for travel</th>
                            <th>Document Date</th>
                            <th>Total cost</th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                    <tfoot>
                        <tr>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script>

        $('.datepicker').datepicker();

        const dtConfig = {
            '#driver-table': {
                columns: [
                    { "data": "IDDriver" },
                    { "data": "FirstName" },
                    { "data": "LastName" },
                    { "data": "DriversLicence" },
                ],
                getAllUrl: '@Url.Action("GetAllDrivers", "SqlConnection")',
                getUrl: '@Url.Action("GetDriverForm", "SqlConnection")',
                createUrl: '@Url.Action("InsertDriver", "SqlConnection")',
                updateUrl: '@Url.Action("UpdateDriver", "SqlConnection")',
                deleteUrl: '@Url.Action("DeleteDriver", "SqlConnection")'
            },
            '#vehicle-table': {
                columns: [
                    { "data": "IDVehicle" },
                    { "data": "Model" },
                    { "data": "Type" },
                    { "data": "YearManufactured" },
                    { "data": "Registration" },
                    { "data": "InitialKilometres" },
                    { "data": "IsAvailable" },
                ],
                getAllUrl: '@Url.Action("GetAllVehicles", "SqlConnection")',
                getUrl: '@Url.Action("GetVehicleForm", "SqlConnection")',
                createUrl: '@Url.Action("InsertVehicle", "SqlConnection")',
                updateUrl: '@Url.Action("UpdateVehicle", "SqlConnection")',
                deleteUrl: '@Url.Action("DeleteVehicle", "SqlConnection")'
            },
            '#travel-order-table': {
                columns: [
                    { "data": "IDTravelOrder" },
                    { "data": "DriverID" },
                    { "data": "VehicleID" },
                    { "data": "TravelOrderTypeID" },
                    { "data": "ExpectedNumberOfDays" },
                    { "data": "ReasonForTravel" },
                    { "data": "CityStartId" },
                    { "data": "CityEndId" },
                    {
                        "data": "DocumentDate",
                        render: function (data, type, full, meta) {
                            return getHtmlDateForDataTable(data);
                        }
                    },
                    { "data": "TotalCost" },
                ],
                getAllUrl: '@Url.Action("GetAllTravelOrders", "SqlConnection")',
                getUrl: '@Url.Action("GetTravelOrderForm", "SqlConnection")',
                createUrl: '@Url.Action("InsertTravelOrder", "SqlConnection")',
                updateUrl: '@Url.Action("UpdateTravelOrder", "SqlConnection")',
                deleteUrl: '@Url.Action("DeleteTravelOrder", "SqlConnection")'
            }
        };

        $('#modal-form').modal({
            backdrop: 'static',
            keyboard: false
        })

        $('#modal-form').modal('hide');

        $('a[data-toggle="tab"]').on( 'shown.bs.tab', function (e) {
                $($.fn.dataTable.tables( true ) ).DataTable().columns.adjust();
        });

        initDataTable(dtConfig);

        function initDataTable(options) {
            for (let selector in options) {
                const table = $(selector).DataTable({
                    dom: 'Bfrtip',
                    scrollX: true,
                    deferRender: true,
                    autoWidth: true,
                    buttons: [
                        {
                            text: 'Clear search',
                            action: function (e, dt, node, config) {
                                table.columns().search('').draw();
                                //reset filters
                                $(table.columns().footer()).find('select option:first-child').prop('selected', true);
                            }
                        },
                        {
                            text: 'New',
                            action: function (e, dt, node, config) {
                                showInsertForm(options[selector].getUrl, options[selector].createUrl, () => $($.fn.dataTable.tables(true)).DataTable().ajax.reload());
                            }
                        },
                        {
                            text: 'Edit',
                            action: function (e, dt, node, config) {
                                const id = getSelectedItemId(dt);
                                if (id != -1) {
                                    showUpdateForm(options[selector].getUrl, id, options[selector].updateUrl, () => $($.fn.dataTable.tables(true)).DataTable().ajax.reload());
                                } else {
                                    alertify.alert('Select item', 'Please select an item');
                                }
                            }
                        },
                        {
                            text: 'Delete',
                            action: function (e, dt, node, config) {
                                const id = getSelectedItemId(dt);
                                if (id != -1) {
                                    deleteEntity(options[selector].deleteUrl, id, () => $($.fn.dataTable.tables(true)).DataTable().ajax.reload());
                                } else {
                                    alertify.alert('Select item', 'Please select an item');
                                }
                            }
                        },
                    ],
                    select: true,
                    ajax: {
                        url: options[selector].getAllUrl,
                        method: 'GET'
                    },
                    columns: options[selector].columns,
                    columnDefs: [
                        {
                            "targets": [ 0 ],
                            "visible": false,
                            "searchable": false
                        }
                    ],
                });

                table.columns().flatten().each(function (colIdx) {
                    // Create the select list and search operation
                    var select = $('<select />')
                        .addClass('form-control')
                        .appendTo(
                            table.column(colIdx).footer()
                        )
                        .on('change', function () {
                            table
                                .column(colIdx)
                                .search($(this).val())
                                .draw();
                        });

                    appendFilterOptions(table, colIdx, select);

                    // Get the search data for the first column and add to the select list

                });

                table.on('draw.dt', function () {
                    table.columns().flatten().each(function (colIdx) {
                        const select = $(table.column(colIdx).footer()).find('select');
                        const selectedVal = select.val();
                        select.empty();

                        appendFilterOptions(table, colIdx, select);
                        select.val(selectedVal);
                    });
                });
            }
        }

        function appendFilterOptions(table, colIdx, select) {
            table
                .column(colIdx, { search: 'applied' })
                .data()
                .sort()
                .unique()
                .each(function (d) {
                    select.append($('<option value="' + d + '">' + d + '</option>'));
                });

            select.prepend("<option value='' selected>-</option>");
        }

        //function showInsertForm(getFormUrl, insertUrl) {

        //    $.ajax({
        //        type: 'GET',
        //        url: getFormUrl,
        //        dataType: 'html',
        //        success: function (response) {
        //            $('.modal-title').text('Create');
        //            $('.modal-body').html(response);
        //            $('.modal-footer').find('.btn-primary').remove();

        //            $('<button/>')
        //                .text('Create')
        //                .addClass('btn btn-primary')
        //                .on('click', e => {
        //                    makeAjaxRequest(insertUrl, 'POST', { model: $('.modal-body').find('form').serializeObject() });
        //                     $('#modal-form').modal('hide');
        //                })
        //                .appendTo($('.modal-footer'));

        //            $('#modal-form').modal('show');
        //        }
        //    })
        //}

        //function showUpdateForm(getUrl, id, updateUrl) {
        //    $.ajax({
        //        type: 'GET',
        //        url: getUrl,
        //        data: { id: id },
        //        dataType: 'html',
        //        success: function (response) {
        //            $('.modal-title').text('Update');
        //            $('.modal-body').html(response);
        //            $('.modal-footer').find('.btn-primary').remove();

        //            $('<button/>')
        //                .text('Update')
        //                .addClass('btn btn-primary')
        //                .on('click', e => {
        //                    makeAjaxRequest(updateUrl, 'PATCH', {
        //                        model: $('.modal-body').find('form').serializeObject()
        //                    });

        //                    $('#modal-form').modal('hide');
        //                })
        //                .appendTo($('.modal-footer'));

        //            $('#modal-form').modal('show');
        //        }
        //    })
        //}

        //function deleteEntity(deleteUrl, id) {
        //    alertify.confirm("Delete", "Are you sure you want to delete this record?", () => {
        //        makeAjaxRequest(deleteUrl, 'delete', {id: id} )
        //    }, () => { });
        //}

        //function makeAjaxRequest(url, method, data) {
        //    $.ajax({
        //        type: method,
        //        url: url,
        //        contentType: 'application/json',
        //        data: JSON.stringify(data),
        //        dataType:'json',
        //        success: function (response) {
        //            alertify.set('notifier','position', 'top-center');
        //            if (response.success) {
        //                alertify.success('Operation was successful');
        //                $($.fn.dataTable.tables(true)).DataTable().ajax.reload();
        //            } else {
        //                alertify.error('Operation has failed!');
        //            }
        //        }
        //    });
        //}

        //function getHtmlDateForDataTable(dateJson) {
        //    const dateLocale = "nb-NO";
        //    if (dateJson == null) {
        //        return "";
        //    }

        //    const date = new Date(parseInt(dateJson.substr(6)));
        //    const yyyyMMdd = date.toISOString().replace(/-/g, '').split('T')[0];

        //    const spanTag =
        //        $('<span/>')
        //            .text(yyyyMMdd)
        //            .hide();

        //    const container =
        //        $('<div/>')
        //            .append(spanTag)
        //            .append(date.toLocaleDateString(dateLocale));

        //    return container.html();
        //}

        //$.fn.serializeObject = function() {
        //    var o = {};
        //    var a = this.serializeArray();
        //    $.each(a, function() {
        //        if (o[this.name]) {
        //            if (!o[this.name].push) {
        //                o[this.name] = [o[this.name]];
        //            }
        //            o[this.name].push(this.value || '');
        //        } else {
        //            o[this.name] = this.value || '';
        //        }
        //    });
        //    return o;
        //};

    </script>
}